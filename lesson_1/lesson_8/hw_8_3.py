"""3. Создайте собственный класс-исключение, который должен проверять содержимое списка на наличие только чисел.
Проверить работу исключения на реальном примере. Необходимо запрашивать у пользователя данные и заполнять список.
Класс-исключение должен контролировать типы данных элементов списка.
Примечание: длина списка не фиксирована.
Элементы запрашиваются бесконечно, пока пользователь сам не остановит работу скрипта, введя, например, команду “stop”.
При этом скрипт завершается, сформированный список выводится на экран.
Подсказка: для данного задания примем, что пользователь может вводить только числа и строки.
При вводе пользователем очередного элемента необходимо реализовать проверку типа элемента и вносить его в список,
только если введено число. Класс-исключение должен не позволить пользователю ввести текст (не число)
и отобразить соответствующее сообщение. При этом работа скрипта не должна завершаться."""


class MyException(Exception):
    def __init__(self, text):
        self.text = text

    def __str__(self):
        return f'Введено не целое число {self.text}'

def my_check(inp_data):
    if not inp_data.isdigit():
        raise MyException(inp_data)
    else:
        return int(inp_data)

"""Оставил, только способ с проверкой на целое число, пытался сделать по другому, через проверку типов
или через проверку вводимых значений, но всегда нарываюсь на одно и тоже (вводимые данные, это строковое значение),
а при проверке например float(inp_data) строчного значения, я получаю в лицо ошибку ValueError,
которая прерывает мой скрип и не вызывает мою проверку. Видно я не доконца понял принцип собственных проверок,
попробую позже разобраться"""
# def my_check(inp_data):
#     if inp_data.isdigit():
#         return int(inp_data)
#     else:
#         try:
#             float(inp_data)
#             return float(inp_data)
#         except ValueError:
#             raise MyException



inp_data = ''
my_list =[]

while inp_data != 'stop':
    try:
        inp_data = input('Введите число или stop: ')
        my_list.append(my_check(inp_data))
    except MyException as err:
        print(err)
    print(my_list)

print(my_list)

